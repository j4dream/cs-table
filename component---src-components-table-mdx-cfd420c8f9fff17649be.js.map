{"version":3,"sources":["webpack:///../src/components/Table.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","Table","header","label","fixed","prop","width","renderHeader","h","p","href","renderCell","i","push","data","r","row","c","enableResize","isMDXComponent"],"mappings":"0gBAQO,IAAMA,EAAe,Q,0MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,cADR,cAGA,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,62BAAw3BC,SAAO,GACh6BJ,QACAH,kBACAQ,eACAC,UACAC,WALg6B,gBAMh6BV,IANg6B,EAOh6BH,eAPg6B,GAQ/5BO,QAAQ,eACZ,WAcK,IAbA,IAAMO,EAAS,CAAC,CACdC,MAAO,YACPC,OAAO,EACPC,KAAM,KACNC,MAAO,GACPC,aAAc,SAACC,EAAGC,GAAJ,OAAU,iBAAGC,KAAK,KAAR,cACxBC,WAAY,kBAAM,iBAAGD,KAAK,KAAR,QACjB,CACDP,MAAO,gBACPC,OAAO,EACPC,KAAM,UAGCO,EAAI,EAAGA,EAAI,IAAKA,IACvBV,EAAOW,KAAK,CACVV,MAAO,KAAKS,EACZP,KAAM,GAAGO,IAMb,IAFA,IAAME,EAAO,GAEJC,EAAI,EAAGA,EAAI,IAAOA,IAAK,CAG9B,IAFA,IAAMC,EAAM,GAEHC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAIC,GAAJ,QAAiBF,EAAjB,IAAsBE,EAGxBD,EAAG,MAAH,QAAuBD,EAAvB,aACAD,EAAKD,KAAKG,GAGZ,OAAO,YAAC,IAAD,CAAOd,OAAQA,EAAQY,KAAMA,EAAMI,cAAY,EAEtDvB,QAAQ,mB,wMAOhBH,EAAW2B,gBAAiB","file":"component---src-components-table-mdx-cfd420c8f9fff17649be.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"X:/Users/j4dream/Documents/GitHub/cs-table/doc/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport Table from 'virtualized-sc-table';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"table\"\n    }}>{`Table`}</h1>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const header = [\\n    {\\n      label: \\'Operation\\',\\n      fixed: true,\\n      prop: \\'op\\',\\n      width: 90,\\n      renderHeader: (h, p) => <a href=\\\"#\\\">Operation</a>,\\n      renderCell: () => <a href=\\\"#\\\">OP</a>,\\n    },\\n    {\\n      label: \\'Email (Fixed)\\',\\n      fixed: true,\\n      prop: \\'email\\',\\n    },\\n  ]\\n  for (let i = 0; i < 200; i++) {\\n    header.push({\\n      label: `H ${i}`,\\n      prop: `${i}`,\\n    })\\n  }\\n\\n  const data = []\\n  for (let r = 0; r < 10000; r++) {\\n    const row = {}\\n    for (let c = 0; c < 200; c++) {\\n      row[c] = `data ${r}:${c}`\\n    }\\n    row[\\'email\\'] = `test_${r}@email.com`\\n    data.push(row)\\n  }\\n\\n  return (\\n    <Table\\n      header={header}\\n      data={data}\\n      enableResize\\n      // renderCell={(record, prop) => record[prop]}\\n      // renderHeader={(header, prop) => header[prop]}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Table,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const header = [{\n          label: 'Operation',\n          fixed: true,\n          prop: 'op',\n          width: 90,\n          renderHeader: (h, p) => <a href=\"#\">Operation</a>,\n          renderCell: () => <a href=\"#\">OP</a>\n        }, {\n          label: 'Email (Fixed)',\n          fixed: true,\n          prop: 'email'\n        }];\n\n        for (let i = 0; i < 200; i++) {\n          header.push({\n            label: `H ${i}`,\n            prop: `${i}`\n          });\n        }\n\n        const data = [];\n\n        for (let r = 0; r < 10000; r++) {\n          const row = {};\n\n          for (let c = 0; c < 200; c++) {\n            row[c] = `data ${r}:${c}`;\n          }\n\n          row['email'] = `test_${r}@email.com`;\n          data.push(row);\n        }\n\n        return <Table header={header} data={data} enableResize // renderCell={(record, prop) => record[prop]}\n        // renderHeader={(header, prop) => header[prop]}\n        mdxType=\"Table\" />;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}