{"version":3,"sources":["webpack:///../src/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","href","target","isMDXComponent"],"mappings":"8fAOO,IAAMA,EAAe,Q,+LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,mBADR,mBAGA,gFAA+D,kBAAIC,WAAW,MAA9E,yBAEA,sBACE,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAC/B,kBAAIA,WAAW,MAAf,SAEJ,kBAAIA,WAAW,MAAK,oBAAIA,WAAW,MAAS,CACxC,MAAS,IAET,kBAAIA,WAAW,MAAf,+CAEJ,kBAAIA,WAAW,MAAK,oBAAIA,WAAW,MAAS,CACxC,MAAS,IAET,kBAAIA,WAAW,MAAf,qBAGN,4DACA,kEACA,iBAAGC,KAAK,6CAA6CC,OAAO,UAA5D,mBA7BK,SA8BL,iBAAGD,KAAK,6CAA6CC,OAAO,UAA5D,kBACA,iBAAQ,CACN,GAAM,UADR,UAGA,4CAA2B,kBAAIF,WAAW,MAA1C,qDAEA,sCACA,sLAGA,8GAEA,yGAEA,iBAAQ,CACN,GAAM,QADR,QAGA,sCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,wCAIL,yCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8SAoBL,iBAAQ,CACN,GAAM,MADR,MAGA,iBAAQ,CACN,MAAS,GAET,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,mCACA,kBAAIA,WAAW,MAAf,gBACA,kBAAIA,WAAW,MAAf,gB,6LAMNJ,EAAWO,gBAAiB","file":"component---src-index-mdx-f45d63e1e949bf8ea001.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"X:/Users/j4dream/Documents/GitHub/cs-table/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport './App.css';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"虚拟化表格\"\n    }}>{`虚拟化表格`}</h1>\n    <h2 {...{\n      \"id\": \"虚拟化-virtualized\"\n    }}>{`虚拟化 Virtualized`}</h2>\n    <p>{`这里涉及到一个常见前端问题，在JS中操作渲染大量 DOM（长列表问题），会导致浏览器严重卡顿，甚至出现假死状态。`}<br parentName=\"p\"></br>{`\n`}{`通常解决这种情况有以下三种办法：`}</p>\n    <ul>\n      <li parentName=\"ul\"><ol parentName=\"li\">\n          <li parentName=\"ol\">{`分页。`}</li>\n        </ol></li>\n      <li parentName=\"ul\"><ol parentName=\"li\" {...{\n          \"start\": 2\n        }}>\n          <li parentName=\"ol\">{`滚动加载，逐步加载 DOM (但有个缺点，如果加载多了改动布局的时候仍然会卡顿)。`}</li>\n        </ol></li>\n      <li parentName=\"ul\"><ol parentName=\"li\" {...{\n          \"start\": 3\n        }}>\n          <li parentName=\"ol\">{`虚拟化，仅渲染视区显示数据。`}</li>\n        </ol></li>\n    </ul>\n    <p>{`这里主要实现的是第三点，也就是前端遇到一些无法使用分页处理的场景。  `}</p>\n    <p>{`先用 Antd Table 简单对比一下，拖动表头改变列的宽度，体验一下两者区别：`}</p>\n    <a href=\"https://codesandbox.io/s/antd-resize-5u469\" target=\"_blank\">Antd Table 未虚拟化</a>--VS--\n    <a href=\"https://codesandbox.io/s/antd-resize-5u469\" target=\"_blank\">Antd Table 虚拟化</a>  \n    <h2 {...{\n      \"id\": \"现有组件现状\"\n    }}>{`现有组件现状`}</h2>\n    <p>{`因为开源的组件大部分都缺少我想要的功能。`}<br parentName=\"p\"></br>{`\n`}{`其实主要是支持虚拟化，同时支持用户动态调整行列大小，交换行列顺序，同时保留用户这些改动。`}</p>\n    <p>{`在此之前都尝试过以下组件:`}</p>\n    <p>{`Ant design table(rc-table)，在 3.X 时未支持，拖动排序(表头)，拖动缩放表格宽度，未支持虚拟化，\n这导致数据量比较多的时候, 页面渲染慢。\n虽然 Ant design table 在 4.X 之后，可以使用 react-window 渲染列表，但并不支持嵌套行表头，嵌套拖动排序。`}</p>\n    <p>{`Element react table，数据量大的时候也存在性能问题，而且未提供虚拟化渲染。\n在数据更新的时候导致页面 reflow，卡顿几秒，同时功能上也未满足需求。`}</p>\n    <p>{`另一个 React Virtualized，也玩了一会，在测试大量数据后组件依然流畅，但功能并不满足，具体表现:\n不支持行嵌套表头，不可伸缩，不支持行列排序。`}</p>\n    <h2 {...{\n      \"id\": \"安装使用\"\n    }}>{`安装使用`}</h2>\n    <p>{`npm 安装，未依赖其他库`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`npm i virtualized-sc-table --save\n`}</code></pre>\n    <p>{`使用 (详情使用请参考后面篇章)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { CTable, STable } from 'virtualized-sc-table';\n\n// 一般表格\n<CTable\n  header={header}\n  data={data}\n  // renderCell={(record, prop) => record[prop]}\n  // renderHeader={(header, prop) => header[prop]}\n/>\n\n// 聚合统计表格\n<STable\n  colHeader={[]}\n  rowHeader={[]}\n  data={header}\n/>\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"待续\"\n    }}>{`待续`}</h2>\n    <ol {...{\n      \"start\": 0\n    }}>\n      <li parentName=\"ol\">{`更好支持 Typescript，更完善的 Test Case，CI/CD；`}</li>\n      <li parentName=\"ol\">{`保存 header 状态（resize，sort 之后状态）；`}</li>\n      <li parentName=\"ol\">{`少量数据更好的展示方式；`}</li>\n      <li parentName=\"ol\">{`暗黑模式；`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}